on:
  push:
    branches: [main]
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write
  contents: write
  id-token: write

name: CI
env:
  RUSTFLAGS: --cfg tokio_unstable
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"

    steps:
      - uses: actions/checkout@v4

      - name: Install and Display Rust specified toolchain
        run: rustup show

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: "v0.10.0"

      - name: Test with latest nextest release
        run: cargo nextest run --profile ci --workspace --target ${{ matrix.target }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install rustfmt and clippy
        run: rustup component add clippy rustfmt
      # Split fetch so timings in Github show the actual
      # time for the clippy run rather than including the cost of crate fetching
      - run: cargo fetch
      # run clippy to verify we have no warnings
      - name: cargo clippy
        run: cargo clippy --all-targets -- -D warnings
      # Check there are no formatting issues
      - name: rustfmt
        run: cargo fmt -- --check --color always

  # Create a PR with the new versions and changelog, preparing the next release.
  release-plz-pr:
    name: Release-plz PR
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [lint, test]
    runs-on: ubuntu-latest
    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
      - name: Run release-plz
        uses: release-plz/action@v0.5
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

  # Release unpublished packages.
  release-plz-release:
    name: Release-plz release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [lint, test]
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: rust-lang/crates-io-auth-action@v1
        id: auth
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
      - name: Run release-plz
        id: release
        uses: release-plz/action@v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}
